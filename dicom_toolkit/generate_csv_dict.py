#!/usr/bin/env python
#-*- coding:utf8 -*-


def parse_file(filename):
    """
    @type filename: string
    """
    from xml.etree import cElementTree

    start_of_table = False
    column_count = -1
    column_array = [None for i in range(1, 11)]

    is_tag = False
    is_uid = False

    tag_file = open("tag_dict_2011.csv", "wb")
    uid_file = open("uid_dict_2011.csv", "wb")

    for event, elem in cElementTree.iterparse(filename, ("start", "end")):
        if event == 'start' and elem.tag == '{http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl':
            start_of_table = True
            is_first = True
            print "start_of_table"

        if event == 'end' and elem.tag == "{http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl":
            print "stop_of_table"
            start_of_table = False

        if start_of_table:
            if event == 'start' and elem.tag == "{http://schemas.openxmlformats.org/wordprocessingml/2006/main}tc":
                column_count += 1
            elif event == 'start' and elem.tag == "{http://schemas.openxmlformats.org/wordprocessingml/2006/main}t":
                val = ""
                if elem.text is not None:
                    val = elem.text

                if column_array[column_count] is None:
                    column_array[column_count] = val
                else:
                    column_array[column_count] += val

            if event == 'end' and elem.tag == "{http://schemas.openxmlformats.org/wordprocessingml/2006/main}tr":
                if is_first:
                    if column_array[0] is None:
                        is_tag = False
                        is_uid = False
                    else:
                        if column_array[0] == "Tag":
                            is_tag = True
                            is_uid = False
                        elif column_array[0].startswith("UID"):
                            is_uid = True
                            is_tag = False

                        is_first = False
                else:
                    if is_tag:
                        content = ';'.join([item for item in column_array if item is not None]).encode("utf8").strip()
                        if content != "" and not content.startswith("Tag"):
                            print content
                            tag_file.write(content + "\n")
                    elif is_uid:
                        content = ';'.join([item for item in column_array if item is not None]).encode("utf8").strip()
                        if content != "" and not content.startswith("UID"):
                            print content
                            uid_file.write(content + "\n")

                column_count = -1
                column_array = [None for i in range(1, 11)]

    tag_file.close()
    uid_file.close()

class DicomTag:
    tag_string = ''
    description = ''
    var_name = ''
    vr = ''
    vm = ''
    retired = False

    def tag_value(self):
        """
        T.tag_value() -> int
        @return:
        """
        pass

class Tags:
    var_name = ""
    description = ""
    vr = ""
    vm = ""
    tag = ""
    retired = False
    valid = True

    def __init__(self, line):
        """
        __init__(line: string)

        @param line:
        """
        content = line.split(';')
        self.valid = len(content) >= 5
        if self.valid is False:
            return

        self.tag = content[0]
        self.description = content[1]
        self.var_name = content[2]
        self.vr = content[3]
        self.vm = content[4]
        self.retired = len(content) >= 6

    def tag_value(self):
        """
        T.tag_value() -> int
        @return:
        """
        pair = self.tag.split(',')
        group = pair[0][1:]
        element = pair[1][:-2].split(' ')[0]

        value = int(group, 16) << 4 | int(element, 16)

        return value

    def const_define_string(self):
        """
        T.const_define_string() -> string
        @return:
        """
        if self.valid is False:
            return ''

        try:
            tag_value = self.tag_value()
        except:
            return ''

        return "public const uint " + self.var_name + " = " + str(tag_value) + '\n\n'

    def filed_comments(self):
        """
        T.filed_comments() -> string
        @return:
        """
        comments = '''
        /// <summary>
        /// </summary>
        '''

        return comments

def generate_dicom_tags():
    indent = 0

    cs_file = open("DicomTags.cs", "wb")
    
    cs_file.write('using System;' + "\n")
    cs_file.write('using System.Collection.Generic;' + "\n")
    cs_file.write('\n')
    cs_file.write('// this file is auto-generated by the python dicom script. ' + "\n")
    cs_file.write('\n')
    cs_file.write('namespace uWs.Dicom\n')
    cs_file.write('{' + '\n')
    indent += 1
    cs_file.write(' ' * indent * 4 + 'public struct DicomTags' + '\n')
    cs_file.write(' ' * indent * 4 + '{' + '\n')
    indent += 1

    tag_file = open('tag_dict_2011.csv', 'r')
    tag_lines = tag_file.readlines();
    tag_file.close()

    for line in tag_lines:
        tag = Tags(line)
        cs_file.write(' ' * indent * 4 + tag.const_define_string())

    indent -= 1
    cs_file.write(' ' * indent * 4 + '}' + '\n')

    indent -= 1
    cs_file.write(' ' * indent * 4 + '}' + '\n')

    cs_file.close()
    

if __name__ == '__main__':
    import sys
    # parse_file('11_06pu.xml')

    generate_dicom_tags()